<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<article lang="en-GB"><?dbhtml dir="userManual"?>
  <articleinfo>
    <title>GINsim user manual</title>
    <bibliomisc>Web : http://gin.univ-mrs.fr/GINsim/</bibliomisc>
  </articleinfo>

  <section>
    <title>Overview</title>
      <para>GINsim is a tool supporting the definition, the simulation and the analysis of regulatory graphs based on a <emphasis role="strong">multilevel logical formalism</emphasis>. This formalism lean on the definition of two types of graphs: <emphasis role="strong">regulatory graphs</emphasis> which model regulatory networks, and <emphasis role="strong">state transition graphs </emphasis>which represent the dynamical behaviour, for given initial state(s) and under some updating assumptions. If you have never used GINsim, the <olink targetdoc="tutorial">GINsim tutorial</olink> may be a better starting point.</para>
      <para>First, we describe the main functionalities of the tool through its main menu options. Then, we describe the specification of a regulatory graph, the simulation (ie construction of the state transition graph) and the tools available to analyse this state transition graph.</para>
   
           <bibliography>
            <title>References</title>
        
            <biblioentry>
                <title>Qualitative analysis of regulatory graphs: a computational tool based on a discrete formal framework</title>
                <authorgroup>
                    <author><firstname>Claudine</firstname><surname>Chaouiya</surname></author>
                    <author><firstname>Elisabeth</firstname><surname>Remy</surname></author>
                    <author><firstname>Brigitte</firstname><surname>Moss√©</surname></author>
                    <author><firstname>Denis</firstname><surname>Thieffry</surname></author>
                </authorgroup>
                <!-- Lectures Notes in Control and Information Sciences -->
                <pubdate>2003</pubdate>
                <volumenum>294</volumenum><pagenums>119-126</pagenums>
            </biblioentry>
        
            <biblioentry>
                <title>GINsim: a software suite for the qualitative modelling, simulation and analysis of regulatory networks</title>
                <authorgroup>
                    <author><firstname>Aitor</firstname><surname>Larrinaga</surname></author>
                    <author><firstname>Lucas</firstname><surname>Sanchez</surname></author>
                    <author><firstname>Denis</firstname><surname>Thieffry</surname></author>
                    <author><firstname>Claudine</firstname><surname>Chaouiya</surname></author>
                </authorgroup>
                <!-- biosystems -->
                <pubdate>2005</pubdate>
            </biblioentry>
        </bibliography>

  </section>

  <section><?dbhtml filename="ui.html"?>
    <title>The UI</title>
    <section>
      <title>The GINsim window</title>
      <para>When GINsim is launched, its main window opens (see the screenshot below).  This window encompasses a series of panels and menus described hereafter.</para>
      <figure id="refscreenshot0">
        <title>Main window of GINsim</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/mainWindow.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Let's now see the content of the menus.</para>
    </section>
    <section>
      <title>File menu</title>
      <figure>
      <title>The file menu</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/fileMenu.png"/>
        </imageobject>
      </mediaobject>
      </figure>

      <section>
        <title>Classical options</title>
        <para>This menu offers all the classical options to open/save a file, to open/close a window, and to exit the application. Some of these actions (new, open and save) are also available from the toolbar.</para>
        <itemizedlist>
        <listitem><para role="newline"><emphasis>new:</emphasis> create a new graph. This will create a new window unless the current graph is empty.</para></listitem>
        <listitem><para role="newline"><emphasis>open:</emphasis> load a graph from a file. This will create a new window unless the current graph is empty.</para></listitem>
        <listitem><para role="newline"><emphasis>save:</emphasis> save the current graph, if no save location was previously specified, it will be asked. The <emphasis>save as</emphasis> action allows to select a new save location. The graph is saved in the, XML-based,  <ulink url="http://gin.univ-mrs.fr/GINsim/ginml.html"><emphasis role="strong">GINML</emphasis></ulink> format. The location selection dialog offers to choose the level of graphical attributes: it is possible to save only the structure of the graph, ignoring all graphical attributes, or to save only the position of nodes. The default is to save all graphical attributes (position, size, color, shape...).
<!--
        <itemizedlist>
        	<listitem>extended save: if this option is selected, the resulting file will be a zip file containing the model itself along with additionnal data (simulation parameters, definition of mutants...) that is associated to it. If the option is not selected, the file will be a text file containing only the model.</listitem>
        </itemizedlist>
-->
        </para></listitem>
        <listitem><para role="newline"><emphasis>close:</emphasis> close the current graph, if no other window is opened, it will create a new graph in the current one, otherwise it will close it.</para></listitem>
        <listitem><para role="newline"><emphasis>quit:</emphasis> close all graphs and exit the GINsim application.</para></listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Merge and save subgraph</title>
        <itemizedlist>
        <listitem><para role="newline"><emphasis>merge graph:</emphasis> merge the opened graph with an other graph of the same type. Merging a graph is the same as opening it, selecting all the graph and pasting it in the first one. Just like copy/paste it will not work on all types of graphs (it obviously works on regulatory graphs).</para></listitem>
        <listitem><para role="newline"><emphasis>save subgraph:</emphasis> save the current selection as a new graph. It is similar to copying the selection, pasting it into a new graph and saving this new graph.</para></listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Available export format</title>
        <para>GINsim comes with some generic exports that can be applied to all kinds of graphs. The following export formats are available under the File/export submenu:</para>
        <itemizedlist>
          <listitem><para role="newline"><emphasis><ulink url="http://www.graphviz.org/">Graphviz</ulink>:</emphasis> Graphs can be exported to the dot format used by graphviz graph visualisation software, those tools are particulary suitable for visualising big graphs. This export format exports only the graph structure, visual settings are losts, it is mainly here for big state transition graphs that can not be viewed within GINsim.</para></listitem>
          <listitem><para role="newline"><emphasis><ulink url="http://www.biolayout.org/">Biolayout </ulink>:</emphasis> Graphs can also be exported to the biolayout format. Like in graphviz format, visual settings are losts.</para></listitem>
          <listitem><para role="newline"><emphasis><ulink url="http://www.w3.org/Graphics/SVG/">SVG</ulink>:</emphasis> the Scalable Vector Graphic (SVG) format is an XML-based format for representing vector graphics, it is gaining more and more popularity and many tools are available to view or edit SVG files. This should be a good starting point to integrate your existing GINsim graph into a paper: export your graph as SVG, you will be able to modify it and to export it to virtually any image format.</para></listitem>
        </itemizedlist>
        <para>In addition to these generic export format, regulatory graphs can be exported into <ulink url="http://www.sbml.org/">SBML</ulink>. <warning>MORE EXPLANATIONS ARE NEEDED</warning></para>
      </section>
    </section>
    
    <section>
      <title>Edit menu</title>
      <para>The edit menu allows the selection of some editing options.</para>
      <figure id="refscreenshot1">
        <title>The edit menu</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/editMenu.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <section>
        <title>Copy/paste</title>
        <para>The edit menu offers well known copy/paste entries.</para>
        <note>Copy and paste actions are specific to GINsim: copying the graph and pasting it into an external application is not supported yet. It also depends on the kind of opened graph (currently only the regulatory graph supports it as it does not make sense in other graphs).</note>
        <itemizedlist>
          <listitem>Copy/paste works between different GINsim windows (assuming they contain the same type of graphs).</listitem>
          <listitem>Pasted items are automatically selected to make it easier to move them.</listitem>
          <listitem>The copy action does not test selected edges, it will automatically select ALL edges between selected nodes,</listitem>
          <listitem>Pasted nodes will be renamed by adding ".1", ".2"... to the original names,</listitem>
          <listitem>logical paremeters are also copied and cleaned up (only logical paremeter in which all involved nodes have been copied are restored). The resulting graph is consistent but these new parameters probably need some tweaking.</listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Editing the graph</title>
        <itemizedlist>
          <listitem><para role="newline"><emphasis>edit</emphasis>, the normal editing mode: select/move nodes and edges,</para></listitem>
          <listitem><para role="newline"><emphasis>add vertex:</emphasis> clicking in the graph creates a new vertex (gene),</para></listitem>
          <listitem><para role="newline"><emphasis>add edge:</emphasis> dragging from a node to another adds an interaction between these nodes,</para></listitem>
          <listitem><para role="newline"><emphasis>delete:</emphasis> activating this action will delete all selected items from the graph.</para></listitem>
          Toolbar buttons show the selected edit mode and allow to change it.
        </itemizedlist>
        <tip>Each editing mode (add a node, add an edge) will be leaved once the action has been performed. Double-clicking on the corresponding toolbar button locks the editing mode until another mode is selected.</tip>
        These options are <emphasis>not</emphasis> available when visualizing a state transition graph.
      </section>
      <section>
        <title>Selection</title>
        <itemizedlist>
            <listitem>the "select all" action will select all items of the graph.</listitem>
            <listitem>The "invert selection" action will unselect all selected items and select all others.</listitem>
        </itemizedlist>
      </section>
    </section>
    <section>
      <title>View menu</title>
      <figure id="refscreenshot2">
        <title>The view menu</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/viewMenu.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para/>
      <para>The View menu allows </para>
      <itemizedlist>
        <listitem>to zoom (zoom In or Out),</listitem>
        <listitem>to divide the window and get two independant windows (the main one with the graph, the secondary one with the complementary information),</listitem>
        <listitem>to display the interaction name (in the case of a state transition graph, the name associated to an edge will be the pair of the source and target states), </listitem>
        <listitem>to move vertices to front or to back (making them easier to select),</listitem>
        <listitem>to display or not the grid and the navigation map,</listitem>
        <listitem>To make the grid active (magnetic) or not.</listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Action menu</title>
      <para>Some actions can be perfomed from the action menu, depending on the type of graph. For the moment the following are available: </para>
      <itemizedlist>
        <listitem><para role="newline">Determination of the <link linkend="scc">strongly connected components (SCC)</link> of a graph, defining a new graph composed by these SCC. You can further visualize this graph or save it.</para></listitem>
        <listitem><para role="newline"><xref linkend="layout"/>.</para></listitem>
        <listitem><para role="newline">The proper <xref linkend="simulation"/> for regulatory graphs.</para></listitem>
        <listitem><para role="newline">Analysing <xref linkend="circuits"/> for regulatory graphs.</para></listitem>
        <listitem><para role="newline">Running a <xref linkend="modelChecker"/> for regulatory graphs.</para></listitem>
        <listitem><para role="newline"><link linkend="pathFinder">Path search</link> for state transition graphs.</para></listitem>
        <listitem><para role="newline"><link linkend="animator">Graphical path construction (animation)</link> for state transition graphs.</para></listitem>
      </itemizedlist>
      <section id="layout" xreflabel="placement algorithms">
        <title>Placement algorithms</title>
        <para>Elements of the graph can be automatically placed on the graph (mainly usefull for generated graphs).</para>
          <formalpara><title>level layout:</title> nodes are placed on lines, nodes without any incoming edges being placed on top and nodes without any outgoing edges at the bottom.</formalpara>
        <figure id="refscreenshot4">
          <title>Level layout example</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../figures/levelLayout.png"/>
            </imageobject>
          </mediaobject>
        </figure>
            <formalpara><title>ring layout:</title>Similar to the level placement, nodes are placed on three concentric rings</formalpara>
        <figure id="refscreenshot5">
          <title>Ring layout exemple</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../figures/ringLayout.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Both the level layout and the ring layout have an inversed counterpart.</para>
      </section>
    </section>
    <section>
      <title>The secondary window</title>
      <para>This window, which is originally attached to the main frame, offers a bird view of the graph and 3 tabs: </para>
      <orderedlist>
        <listitem>Modelling attributes (This name will change according to the context)</listitem>
        <listitem>Graphic attributes</listitem>
        <listitem>Graph properties</listitem>
      </orderedlist>
      <para>The "modelling attributes" and "graph properties" tabs are specific to the type of graph and will be presented with graphs.</para>
      <para>Active tab depends on the current selection:</para>
      <itemizedlist>
            <listitem>if nothing is selected, only the graph property tab is active,</listitem>
            <listitem>if a node or an edge is selected, the first two tabs are actives,</listitem>
            <listitem>if several nodes OR several edges are selected, only the graphic attributes tab is active,</listitem>
            <listitem>if a mix of nodes and edges are selected, all tabs are disabled.</listitem>
      </itemizedlist>
      <section>
        <title>Graphic attributes</title>
        <para>The graphic attributes tab in the tool window allows graphic customization of the graph.</para>
        <itemizedlist>
          <listitem>On nodes:<itemizedlist>
              <listitem>background/foreground color,</listitem>
              <listitem>node shape and size,</listitem>
              <listitem>border drawing method.</listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <figure id="refscreenshot6">
          <title>Visual settings for vertices</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../figures/vertex_vs.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para/>
        <itemizedlist>
          <listitem>on edges:
            <itemizedlist>
              <listitem>line color,</listitem>
              <listitem>line width,</listitem>
              <listitem>intermediate points can either be automaticaly or manually placed,</listitem>
              <listitem>drawing method: straight from one point to the following one or following a bezier  curve.</listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <figure id="refscreenshot7">
          <title>Visual settings for edges</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../figures/edge_vs.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <tip>Note the buttons on the right:
        <itemizedlist>
          <listitem><para role="newline"><emphasis>apply all:</emphasis> apply the selected options (those for which the checkbox are selected) to all nodes (or edges) of the graph. If several nodes or edges are selected, this will apply these options to the selection only.</para></listitem>
          <listitem><para role="newline"><emphasis>Set as default:</emphasis> use the selected option as default for items which will be created later.</para></listitem>
        </itemizedlist>
        </tip>
      </section>
      <section>
        <title>Bird view</title>
        <para>The bird view offers an overview of the graph, the red square showing the viewed part. It also offers some navigation facilities:</para>
        <itemizedlist>
          <listitem>click on it to change the viewed part</listitem>
          <listitem>resize the red square (using the bottom right corner) to change the zoom level</listitem>
        </itemizedlist>
      </section>
    </section>
    <section id="whattodo">
      <title>What to do</title>
      <para>When a graph is generated, the user has to choose what to do with the new graph.</para>
      <figure id="refscreenshot8">
        <title>The <emphasis>what to do</emphasis> window</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/whattodo.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The top right part will vary depending on the kind of generated graph, for state transition graphs stable states are visible directly from this window.</para>
      <para>Clicking on the "OK" buttons performs the selected action. The "what to do" window will not disappear unless the "display" action was selected, this allows the user to perform several actions on his new graph. If the graph is displayed, all these actions will be available from the GINsim window.</para>
    </section>
  </section>
  
  
  <section><?dbhtml filename="editRegulatoryGraph.html"?>
    <title>Editing the regulatory graph</title>
    <para>
      <phrase id="notes"/>
    </para>
    <section>
      <title>Notes</title>
      <para>Notes can be attached to several parts of the regulatory graph:</para>
      <itemizedlist>
        <listitem>the graph itself</listitem>
        <listitem>nodes (genes)</listitem>
        <listitem>edges (interactions)</listitem>
      </itemizedlist>
      <para>The note panel is divided in two parts: a textual comment and a list of URL.</para>
      <figure id="refscreenshot9">
        <title>Notes</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/annotation.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>To remove an URL from the list, set it to a blank value.</para>
    </section>
    <section>
      <title>Node order</title>
      <para>The left part of the regulatory graph property tab shows the current node order and allows to modify it. To modify it, select the nodes you want to move, then click on the "up" or "down" button:</para>
      <figure id="orderAnim">
      <title>re-order nodes</title>
      <mediaobject><imageobject><imagedata fileref="../figures/node_order.png"/></imageobject></mediaobject>
      </figure>
      <para role="center"><ulink id="l_orderAnim" url="javascript:show('orderAnim')">Show animation</ulink></para>
      
    </section>
    <section>
      <title>Nodes</title>
      <para>When a single node is selected, the "modelling attributes" tab allows to configure this node:</para>
      <figure id="fig_nodeSetting">
      <title>Settings of a node</title>
      <mediaobject><imageobject><imagedata fileref="../figures/node_config.png"/></imageobject></mediaobject>
      </figure>
      <para role="center"><ulink id="l_fig_nodeSetting" url="javascript:show('fig_nodeSetting')">Show animation</ulink></para>
      <note><para>The "notes" and "parameters" buttons switch the right part between <link linkend="notes">notes</link> and <link linkend="logicalParameters">logical parameters</link> editing.</para></note>

      <itemizedlist>
        <listitem>name</listitem>
        <listitem>id: appears in the graph and must be uniq</listitem>
        <listitem>max value: default to 1 (boolean node), it can be increased for multivalued nodes</listitem>
        <listitem>basal value: default to 0, the value towards which the node tends when none of its regulators are active</listitem>
        <listitem>logical parameters: control the dynamical evolution of the node when some of its regulators are active</listitem>
      </itemizedlist>

    <section id="logicalParameters">
      <title>Logical parameters</title>
      <para>When a node is selected, <emphasis role="strong">logical parameters</emphasis> applied on this node can be configured in the right part of the "modelling attribute" tab.</para>
      <para>While the number of logical parameters can be very high, the value of most of these parameters is zero. To simplify the configuration, only non-zero parameters have to be defined.</para>
      <para>The right list contains all interactions on the selected node, the left one contains logical parameters, it starts empty, let's see how to fill it. We want this node to take the value "1" when some interactions are actives:</para>
      <para>first, select the corresponding interactions:</para>
      <para>then, click the "&lt;&lt;" button to create a new logical parameter on the left, filled with interactions selected on the right.</para>
      <figure id="logPara">
      <title>Editing logical parameters</title>
      <mediaobject><imageobject><imagedata fileref="../figures/logical_parameters_add.png"/></imageobject></mediaobject>
      </figure>
      <para role="center"><ulink id="l_logPara" url="javascript:show('logPara')">Show animation</ulink></para>

       <tip><itemizedlist>
      <listitem>Adding twice the same interaction set is not possible.</listitem>
      <listitem>To delete a logical parameter, select the corresponding line and click on the "X" button.</listitem>
      <listitem>To Modify a logical parameter, select it and the corresponding set of interactions will be selected in the right list, adapt it to your needs and click on the "&lt;&lt;" button to apply the new settings. Just like when adding interactions, if the new parameter set is already present in the list of logical parameters, nothing will be changed.</listitem>
      <listitem>If a logical parameter is selected and you want to add a new one, first select the empty line at the bottom of the list, otherwise you would update the selected parameter.</listitem>
      </itemizedlist></tip>
    </section>

    </section>
    <section>
      <title>Interactions</title>
      <para>When a single edge is selected, the "modelling attributes" tab allow to set the parameters of this edge:
      <figure id="fig_edgeConfig">
      <title>Settings of an edge</title>
      <mediaobject><imageobject><imagedata fileref="../figures/interaction_config.png"/></imageobject></mediaobject>
      </figure>
      </para>
      <para role="center"><ulink id="l_fig_edgeConfig" url="javascript:show('fig_edgeConfig')">Show animation</ulink></para>
      <para>
      An edge represents that its source node has an effect on its target node. As a node can have diferent effects on another node depending on its level of activation, edges can contain several interactions.
      <itemizedlist>
      <listitem>Use the "+" button to add an interaction</listitem>
      <listitem>Use the "X" button to delete the selected interaction, if it is the last one, the edge will also be deleted</listitem>
      <listitem>configure the selected interaction:
        <itemizedlist>
            <listitem>Range of activity: values of the source node between which this interaction is active</listitem>
            <listitem><para role="newline">Sign: is this interaction an activation, an inhibition or unknown ? This parameter is visual only, the real effect of  interactions is defined through <link linkend="logicalParameters">logical parameters</link></para></listitem>
        </itemizedlist>
      </listitem>
      </itemizedlist>
      </para>
    </section>

    <section>
      <title>Model integrity</title>
      <para>GINsim tries hard to keep your model valid: 
      <itemizedlist>
      	<listitem>when an interaction is deleted, all logical parameters in which it was involved are also deleted (just cleaning them up would be incorrect as they would conflict either with defned (non-zero) parameters or with implicit (zero) ones). </listitem>
      	<listitem>when the max value of a node is changed, interactions and logical parameters are checked and if necessary silently updated to avoid impossible values.</listitem>
    </itemizedlist>
      Those automatic changes are necessary to keep the model valid, but they can alter it, keep in mind that you need to double-check your parameters after doing these kind of changes.</para>
      <important>When a node has several actions on another one, the activation range of those interactions are supposed to be disjoined but GINsim will let the user enter non-disjoined interactions (this is often "needed" as a temporary state when creating a model, enforcing this would make the model creation slower).</important>
      <para role="lineBreak">Checking activation intervals of interactions and the correctness of logical parameters (a parameter involving disjoined interactions will never be triggered, it should not be defined) is left to the user as adding these controls adds more annoyances than real help. To help detecting invalid logical parameters, they are highlighted, but a change in the activation-range of one of the interactions can turn a valid logical parameter into an impossible one, without any visual feedback.</para>
    </section>
  </section>
  
  
  <section id="simulation" xreflabel="simulation"><?dbhtml filename="simulation.html"?>
    <title>The simulation</title>
    <para>Select the "run simulation" action to compute the state transition graph, but it has to be configured first, hereafter is a screenshot of the configuration dialog:</para>
    <figure id="refscreenshot10">
      <title>Settings of the simulation</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/simulation_config.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <section>
      <title>Search modes</title>
      <para>In a given state of the system, one or several genes are pushed toward another state. when several changes are pending, the different simulation assumptions will lead to different following states and then to different state transition graphs.</para>
      <para>Here are the currently available search modes, others are being worked on.</para>
      <section>
        <title>Asynchronous</title>
        <para>This is default search mode. In this mode, all changes happen and they happen independantly (in separated concurrent path). Therefore it will generate the biggest state transition graphs, taking in account any possible path. It probably contains the real, biological path but this one may be lost between many other less relevant ones. Its huge size make it difficult to generate and to analyse. Other assumptions exists to generate more manageable state transition graphs.</para>
        <figure id="refscreenshot11">
          <title>State transition graph for an asynchronous simulation</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../figures/dynamic_async.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Each state can have several "following states", each of them correspond to a single change.</para>
        <para>In this mode, the graph transition state can be generated "depth first" (read visiting the following state before visiting other following of the parent state) or "breadth first" (read generating it level by level), they will generate the same state transition graph except if interrupted (manually or by a <link linkend="dslimit">depth or size limit</link>).</para>
      </section>
      <section>
        <title>Synchronous</title>
        <para>In this mode, all changes happen but they are supposed to happen simultaneously. This simplification often generates a state transition graph that is far from realistic but sometimes it is not that bad and it is much simpler than the graph generated under an asynchrounous assumption.</para>
        <tip><para role="newline">This mode can be a "quick" way to find stable states when launched on the full graph (see <link linkend="initialStates">initial states</link>)</para></tip>
        <figure id="refscreenshot12">
          <title>State transition graph for a synchronous simulation</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="../figures/dynamic_sync.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Each state has at most one "following state" corresponding to all possible changes.</para>
      </section>
      <section>
        <title>Priority classes</title>
        <para>In this mode, nodes can be ordered by priority (reactivity speed). This order is not strict: nodes are grouped together inside <emphasis>priority classes</emphasis>.</para>
        <itemizedlist>
            <listitem>each priority class can be either synchronous or asynchronous</listitem>
            <listitem>priority classes can be grouped together, so that they have the same priority. Classes with the same priority are considered asynchronous to each other (but individual classes member will still be synchronous if configured so)</listitem>
            <listitem>transitions associated with production and degradation can be assigned to different classes</listitem>
        </itemizedlist>
        <para>The simulation works as follow:
        <itemizedlist>
            <listitem>search for the first changing node, in each class starting with the first one (the highest ranked one, on top of the list)</listitem>
            <listitem>if none if found, the node is stable.</listitem>
            <listitem>if one is found, search for other changes with compatible priority: in the same class and in the next(s) one if they have been grouped.</listitem>
        </itemizedlist>
        The default is to have all genes in a single asynchronous priority class, leading to the same state transition graph as the one obtained under the asynchronous mode. The configuration dialog allows to add and configure priority classes, and to move nodes from one priority classes to another.
        </para>
      <figure id="fig_priorityClass">
      <title>Priority class</title>
      <mediaobject><imageobject><imagedata fileref="../figures/priorityClass.png"/></imageobject></mediaobject>
      </figure>
      <para role="center"><ulink id="l_fig_priorityClass" url="javascript:show('fig_priorityClass')">Show animation</ulink></para>
    <para>The left part shows priority classes and allows to edit their internal mode (through the toggles in the "sync" column) and name.
    The two column on the right show all nodes of the model, some of which are in the selected class and can be removed from it, and the others, associated with an other class, can be added to it.
    </para>
    <note><itemizedlist>
        <listitem>Adding a node to the selected class removes it from the class with which it was associated.</listitem>
        <listitem><para role="newline">Removing a node from the selected class adds it back to the <emphasis>DEFAULT</emphasis> one.</para></listitem>
    </itemizedlist></note>
    <para>One can reorder classes (change priority) by mean of the "up" and "down" buttons. If selected classes belong to groups, the whole group will move, not only the selected part.</para>
    <para>The "G" toggle button can be used to group and ungroup classes:
    <itemizedlist>
        <listitem>If all selected classes belongs to the same group, the button is toggled and clicking on it will destroy this group</listitem>
        <listitem>If selected classes belongs to different groups (or to none), the button is not toggled and clicking on it will group all this classes together. The resulting group will have the same priority as the class with the lower one.</listitem>
    </itemizedlist>
    </para>
      </section>
    </section>
    <section id="initialStates">
      <title>Initial states</title>
      <para>The right part of this dialog is dedicated to select the desired initial states, the user can select:</para>
      <itemizedlist>
        <listitem>the full graph and each possible state will be used as starting point,</listitem>
        <listitem>a selection of initial states and the user will have to build this selection using the table:
          <para>each cell can contain a semicolon (;) separated list of values or intervals, with the special value "m" designing the max value of the node: </para>
          <para role="lineBreak">exemple: 0;2-4 mean 0 or values between 2 and 4. 0-m means all possible expression levels.</para>
          </listitem>
      </itemizedlist>
      <para>Use the "X" button to delete the selected row of initial states, or the "reset" button to delete all initial states.</para>
      <note> GINsim will try to remember settings from previous run, including initial states. These settings will be removed if the size of the graph or the node order changed, in all other cases it will "only" ensure that the initial states are not impossible states. This is fine in most cases but might be annoying, use the "reset" button to delete all initial states.</note>
    </section>
    <section>
      <title>Blocking transition of nodes</title>
      <para>One may want to simplify the state transition graph by blocking the evolution of some nodes (the regulatory ones, read genes). The "transition blocking" button open the following dialog. The selected settings leads to this state transition graph</para>
      <figure id="refscreenshot14">
        <title>Transition blocking</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/blocking.png"/>
          </imageobject>
        </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/dynamic_async_blocked.png"/>
        </imageobject>
      </mediaobject>
      </figure>
      <para>The transition involving G1 leaving the "1" value has been suppressed and a stable state appeared (in other cases it may suppress stable states or more generally change the connectivity properties of the graph).</para>
      <para>Using this method to cut the original graph, we can build smaller graphs but the nice thing is that they are meaningfull: this setting is usefull to simulate some kinds of mutants without having to deal with several copies of the regulatory graph (some other types of mutants can not be simulated without modifying it). This is just an additionnal constraint and can be applied with each simulation mode.</para>
      <note>Like for initial states, GINsim will try to remember this setting, use the "reset" button to delete all previously configured transition blocking.</note>
    </section>
    <section id="dslimit">
      <title>Depth and size limits</title>
      <para>An option is also offered to limit the search depth and/or the total number of states generated.</para>
      <itemizedlist>
        <listitem>
          <para>the limit on depth apply to all simulation modes except the asynchronous breadth first one. </para>
          <para role="lineBreak">Note: when starting with several initial states, if an initial state is already in the state transition graph when it is considered, it will not trigger another search, ie the effective depth limit on this initial state will be shorter.</para>
        </listitem>
      </itemizedlist>
      <figure>
      <title>State transition graph limited in depth</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/stg_depth_limited.jpg"/>
        </imageobject>
      </mediaobject>
      </figure>
      <itemizedlist>
        <listitem>
          <para>The limit on the total number of states apply to to all simulation modes. In the asynchronous assumption, it has slightly different effects on depth first and breadth first search.</para>
        </listitem>
      </itemizedlist>
      <figure>
      <title>State transition graph limited in size</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/stg_size_limited.jpg"/>
        </imageobject>
      </mediaobject>
      </figure>
    </section>
    <section>
      <title>Running the simulation</title>
      <para>While the simulation is running, the bottom left corner indicates the size of the generated state transition graph. The simulation is interruptible at any moment without loosing the currently calculated graph.</para>
      <para>Once the simulation is done (or interrupted), the user has to choose what to do with its new graph [see <ulink url="#whattodo" type=""><link linkend="whattodo">above</link></ulink>].</para>
    </section>
  </section>
<!--
  <section id="circuits" xreflabel="circuits"><?dbhtml filename="circuits.html"?>
    <title>Analysing functionnality of circuits</title>
  </section>  

  <section id="modelChecker" xreflabel="model checker"><?dbhtml filename="modelChecker.html"?>
    <title>Running a model checker</title>
  </section>  
-->  
  <section><?dbhtml filename="analyseDynamicGraph.html"?>
    <title>Analizing the state transition graph</title>
    <section id="scc">
      <title>Strongly connected component</title>
      <para>One can get the graph of the Strongly Connected Components (SCC graph) of an existing graph. The SCC graph is similar to the original graph but without cycles: each node of the SCC graph can "contain" a cycle or a set of linked cycles of the original graph, this makes it easier to follow pathways as the resulting graph is shorter and simpler. To compute this graph, use the "SCC graph" action in the "Actions" menu.</para>
      <figure>
      <title>Strongly Connected Components dialogs</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/scc.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/scc_running.png"/>
        </imageobject>
      </mediaobject>
      </figure>
      <para>If this search is cancelled before the last operation (searching paths), no result can be saved. Otherwise, at least all the SCC can be saved but pathes between them may be missing.</para>
      <para>Here is a little state transition graph and the corresponding SCC graph (on the right):</para>
      <figure id="refscreenshot15">
        <title>Strongly Connected Components graph</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/sccGraph.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Note that the "selection attribute" tab in the SCC graph shows the content of the selected component.</para>
      <para>Once that the SCC graph is opened, one can extract a subgraph of the original graph corresponding to the selected items in the SCC graph:</para>
      <figure>
      <title>Strongly Connected Components and subgraph</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/actionMenu_reduced.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/sccSubGraph.png"/>
        </imageobject>
      </mediaobject>
      </figure>
      <para/>
    </section>
    <section id="animator">
      <title>Animation plugin</title>
      <para>This plugin makes a visual link between the state transition graph and the regulatory graph. It can be launched from both of them: it will ask the user to open the second graph if it can not find it automatically.</para>
      <para>It can be used as a more visual way to represent a state: when a state is selected, the regulatory graph is colorized according to the selected state: actives genes and interactions are highlighted (but it is not perfect as each edge can contain several interactions)</para>
      <figure id="fig_animator">
        <title>The animation plugin</title>
        <mediaobject><imageobject><imagedata fileref="../figures/animator.png"/></imageobject></mediaobject>
      </figure>
      <para role="center"><ulink id="l_fig_animator" url="javascript:show('fig_animator')">Show animation</ulink></para>

      <para>The main purpose is to build a path in the state transition graph: </para>
      <para>when the first node is selected, it is colorized (in blue) and it shows which states can be reached from here. You can still select other states (and the regulatory graph will be colorized) but the path is not modified, if you select on of the "valid" states, this one is added to the path and the new "valid" states are highlighted.</para>
      <para>To build another path, select a state in the dialog and press the "&lt;&lt;" button to delete from the path all states starting with this one.</para>
      <para>You can animate the regulatory graph following your path by clicking the "|&gt;" button.</para>
    </section>
    <section>
      <title>Path finder</title>
      <para><phrase id="pathFinder"/>It is often important to be able to find a path between different states of the state transition graph.</para>
      <para>The "search path" action is usefull in those cases (it is available in the action menu or in the "whattodo" dialog).</para>
      <para>Use search path dialog to set your starting state, the state you want to reach and optionnaly intermediate states (use the "+" and "X" buttons to add/remove intermediate states).</para>
      <figure>
      <title>Search for a path in the state transition graph</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/search_path_found.png"/>
        </imageobject>
      </mediaobject>
      </figure>
      <para>If a path is found, it can be either visualized or exported as gnuplot script (see <link linkend="gnuplot">below</link>).</para>
      <para>If the user enters a state not present in the graph (if the state is impossible, or if the graph is partial), the corresponding row will be highlighted in red and the "run" button disabled:</para>
      <figure>
      <title>Can not find the path</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/search_path_notin.png"/>
        </imageobject>
      </mediaobject>
      </figure>
    </section>
    <section>
      <title>Path visualization with gnuplot</title>
      <para><phrase id="gnuplot"/>Path created with the animation plugin or found by the path finder can be visualized using gnuplot.</para>
      <figure>
      <title>gnuplot export dialog</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="../figures/gnuplotExport.png"/>
        </imageobject>
      </mediaobject>
      </figure>
      <para>First select nodes that should appear in the graph, selecting many nodes badly affects the graphs.</para>
      <para>Then select the kind of graph to create (see bellow).</para>
      <para>Finally, click "export" and choose a place to save your plot. Note that two files will be created but only the first filename will be asked to the user, both files are obviously necessary two feed gnuplot.</para>
      <para>If you saved it as "myplot.gnuplot" ("myplot.data" will also be generated), you will juste have to run gnuplot and load the gnuplot script file in it with the <emphasis>load "mygraph.gnuplot"</emphasis> command.</para>
      <figure id="refscreenshot17">
        <title>gnuplot export examples</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/plot_arrow.png"/>
          </imageobject>
        </mediaobject>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../figures/plot_multi.png"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>
</article>