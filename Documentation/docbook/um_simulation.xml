<?xml version="1.0"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"> 

<section id="sec_simulation" xreflabel="simulation">
	<?dbhtml filename="simulation.html"?>
	<title>The simulation</title>
	<para>Once a regulatory model has been defined, a simulation can be launched through the
			<emphasis>Run Simulation</emphasis> option of the <emphasis>Action</emphasis> menu.
		This option triggers a dialog box allowing to choose simulation settings (<xref
			linkend="fig_configSimulation" xrefstyle="select:label"/>).</para>
	<figure id="fig_configSimulation">
		<title>Simulation settings</title>
		<mediaobject>
			<imageobject>
				<imagedata fileref="../figures/simulation_config.png"/>
			</imageobject>
			<caption>
				<simpara>This dialog box allows to configure and run the simulation.</simpara>
			</caption>
		</mediaobject>
	</figure>
	<section id="sec_simulationSettings">
		<title>Simulation Parameters</title>
		<para>This dialog box allows to define a set of simulation settings:
			several simulation settings can be created, saved and restored with the graph, <emphasis>provided that the
				extended save is selected</emphasis>.</para>
		<para>The right part of the dialog box enables the definition of the current simulation setting.</para>
		<para>The left part of the dialog box enables to add, remove or switch between simulations settings.</para>
	</section>
	<section id="sec_initialStates">
		<title>Initial states</title>
		<para>The bottom part of the dialog box is dedicated to the definition and the selection
			of the initial states of the simulation (see <xref linkend="fig_configSimulation"
			xrefstyle="select:label"/>). A table lists and enables the definition of additional
			initial states. Note that the definition of initial states is shared between all simulation settings.
		</para>
		<para>Each row of the table corresponds to a set of states. Gene levels are 
			specified in the corresponding table cell. 
			Multiple expression levels can be defined using semicolon (;) or in terms of list of values
			or intervals (denoted by a dash). The special value "m" denotes the maximal value
			of the gene. For example, "0;2-4" means "0 or values between 2 and 4"; "0-m" means
			"any	expression level". The default, denoted by a "*", covers all possible values (it is
			thus the same as "0-m").</para>
		<tip>A value can be entered in a set of selected cells at once.</tip>
		<para>To be used for the current simulation setting, a row must be selected (using
			checkboxes in the second column). Only the states corresponding to the selected 
			row(s) are considered for the simulations. If no row is selected, all possible states
			are considered generating a complete state transition graph.</para>
<!--
		<para>The simulation will start with every selected initial states, unless they have
			already been reached by a previous simulation (<emphasis>i.e.</emphasis> from another initial state).</para>
-->
		<note>
			<simpara>The "X" button deletes the selected row of initial states. The "reset"
				button unselects all selected rows.</simpara>
		</note>
	</section>
	<section id="sec_mutants" xreflabel="mutants definition">
		<title>Mutant Definition</title>
		<para>GINsim facilitates the definition of <emphasis>mutants</emphasis>, which can then be
			selected before running a simulation. A mutant is a set of restrictions on the
			evolution of gene activity levels. The <emphasis>Configure</emphasis> button of the
			<emphasis>Mutant</emphasis> panel (in the simulation dialog box, but also in some
			panels) opens a dialog box, allowing to specify minimal and maximal activity
			levels for some genes. Once the activity level of a gene enters the specified
			interval, it can not leave it anymore, i.e. transitions pushing the gene outside of
			the interval are ignored. This enables the definition of different perturbations (knockouts
			or ectopic expressions for one or several genes) as an extension of the model. The
			simulation of more subtle mutants (conditional knockouts...) still requires
			modifications of the logical parameters.</para>
		<warning>
			<simpara>These representation of mutants blocks some transitions, but does not
				affect trajectories where the activity level of the gene is outside of this
				range. Completely locking the expression level of a gene requires to properly
				set its initial values.</simpara>
		</warning>
		<figure id="fig_mutantDef">
			<title>Mutant definition</title>
			<mediaobject id="mdef">
				<imageobject>
					<imagedata fileref="../figures/mutantDef.png"/>
				</imageobject>
				<caption>Dialog box for the definition of mutants.<para condition="html"><ulink
							url="javascript:show('mdef')">Show
				animation</ulink></para></caption>
			</mediaobject>
		</figure>
		<figure id="fig_mutantsResult">
			<title>Mutant simulation result</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../figures/blocking.png"/>
				</imageobject>
				<caption>Result of an asynchronous simulation, where the expression level for Cro has been blocked at 1.
				The state transition graph is the same as the original asynchronous one, but all transitions where Cro leaves
				this value have been suppressed. This state transition graph is now composed of two disconnected parts,
				with a new stable state.</caption>
			</mediaobject>
		</figure>
	</section>
	<section id="sec_constructionStrategy">
		<title>Construction Strategy</title>
		<para>In a given state of the system, one or several genes are called to update their
			values. When several changes are pending, different construction strategies lead to
			different successor states and thus to different state transition graphs.</para>
		<section id="sec_synchronous">
			<title>Synchronous mode</title>
			<para>In this mode, all updating calls are performed simultaneously. This simplification
				may generate artefacts in the state transition graph.</para>
			<para>Each state has then at most one successor state, which encompasses fully
				updated gene levels.</para>
		</section>
		<section id="sec_asynchronous">
			<title>Asynchronous mode</title>
			<para>In this mode, all changes are performed independantly. It will generate a
				state transition graph taking into account any possible trajectories. This mode
				is chosen by default.</para>
			<para>A given state may have several successor states, each of them corresponding to a
				single updating of one gene level.</para>
			<para>In this mode, the graph transition state can be generated "depth first" or
				"breadth first". The same state transition graph will be built, except if
				interrupted (for illustration, see <link linkend="sec_dslimit">depth and size
					limitation</link>).</para>
			<figure id="fig_syncvsasync">
				<title>Construction strategy: synchronous versus asynchronous</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../figures/a-sync.png"/>
					</imageobject>
					<caption>Samples of simulation results for the lambda4 model, applying
						asynchronous and synchronous strategies to the same initial states (all
						states where C1=0 and Cro&gt;0). Dotted arcs denote multiple,
						simultaneous transitions.</caption>
				</mediaobject>
			</figure>
		</section>
		<section id="sec_pclass">
			<title>Priority classes</title>
			<para>This strategy allows the user to group components into different classes, and
				to assign a priority level to each of these classes. In case of concurrent
				transition calls, GINsim first updates the gene(s) belonging to the class with
				the highest ranking. For each class, the user can further specify the desired
				updating assumption, which then determines the treatment of concurrent
				transition calls inside that class. When several classes have the same ranking,
				concurrent transitions are treated under an asynchronous assumption (no
				priority).</para>
			<para>By default, all transitions belong to the same asynchronous class. Running a
				simulation without further configuration is thus the same as using the
				asynchronous assumption.</para>
			<para>The left part of the configuration dialog box shows a list of priority classes
				(see <xref linkend="fig_pclass" xrefstyle="select:label"/>). The name of a class
				can be edited and a checkbox allows to change its internal mode from
				asynchronous (unchecked) to synchronous (checked). Buttons enable to add (+),
				delete (X), order (using the arrows) and group/ungroup (G) priority classes.</para>
			<para>The central column lists transitions that belong to the currently selected
				class, while the column on the right displays all other transitions (<emphasis>i.e.</emphasis> belonging to
				other classes). To add transitions to the selected class, choose them in the
				right list an click on the "&lt;&lt;" button. The "&gt;&gt;" button removes the
				transition selected in the central list from the current class and add them to
				the first class in the list.</para>
			<para>Finally, a drop-down list on the bottom left, allows to apply some predefined settings.</para>
			<figure id="fig_pclass">
				<title>Definition of Priority classes</title>
				<mediaobject id="pclass">
					<imageobject>
						<imagedata fileref="../figures/priorityClass.png"/>
					</imageobject>
					<caption>
						<para condition="html"><ulink url="javascript:show('pclass')">Show
								animation</ulink></para>
					</caption>
				</mediaobject>
			</figure>
			<figure id="fig_dynpclass">
				<title>Priority Class: example result</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="../figures/dyn_pclass.png"/>
					</imageobject>
					<caption>
						<para>Example of simulation by priority classes. Two priority classes
							have been created. The highest ranked one is synchronous and
							contains C1, C2 and Cro. The other class contains only N. The
							resulting state transition graph is splited into two parts: N
							expressed <emphasis>versus</emphasis> N not expressed.</para>
					</caption>
				</mediaobject>
			</figure>
		</section>
	</section>
	<section id="sec_dslimit">
		<title>Depth and size limitations</title>
		<para>An option is also offered to limit the search depth and/or the total number of
			states generated in a simulation.</para>
		<para>The limit on depth applies to all simulation modes, excepting the asynchronous
			breadth first one (where no information on depth is stored). </para>
		<warning>
			<simpara>When considering several initial states, some of them can be reached while
				running the simulation from an other state. In this case, no new search will be
				triggered for them and the depth counter will not be reinitialised (i.e. the
				depth limit for these initial states will be shorter).</simpara>
		</warning>
		<figure id="fig_dfl">
			<title>Limitation of the depth in the case of a depth first construction</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../figures/stg_depth_limit.png"/>
				</imageobject>
				<caption>State transition graph with all reachable states from the state "0111".
					The same simulation with a depth limit set to 2 keeps only the initial state
					and the nodes at a distance of two or less (i.e. the six white
				states).</caption>
			</mediaobject>
		</figure>
		<para>The limit on the total number of states apply to all simulation modes. Under the
			asynchronous assumption, this limit has slightly different effects on depth first
			and breadth first search.</para>
		<figure id="fig_sizeLimits">
			<title>Limitation of the size (depth first and breadth first search construction)</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="../figures/stg_size_limit.png"/>
				</imageobject>
				<caption>
					<para>The limit on the total number of nodes has different effects on depth
						first and breadth first state transition graphs. These examples show the
						graph of <xref linkend="fig_dfl" xrefstyle="select:label"/> limited to 6
						states. The first state transition graph was obtained using the depth
						first construction, whereas the second results from the breadth first
						one.</para>
				</caption>
			</mediaobject>
		</figure>
	</section>
	<section id="sec_runSimulation">
		<title>Running the simulation</title>
		<para>While the simulation is running, the bottom left corner indicates the size of the
			generated state transition graph. The simulation can be interrupted, using the
				<emphasis>Cancel</emphasis> button, without loosing the calculated part of the
			state transition graph.</para>
		<para>At the end of a simulation, several options are available to save, display or analyse the
			resulting state transition graph (see <xref linkend="sec_whattodo" xreflabel="select:label"/>).</para>
	</section>
</section>

