package org.ginsim.service.export.documentation;

import org.colomoto.biolqm.NodeInfo;
import org.colomoto.biolqm.metadata.Annotator;
import org.colomoto.common.task.AbstractTask;
import org.ginsim.common.application.LogManager;
import org.ginsim.common.utils.IOUtils;
import org.ginsim.common.xml.XMLWriter;
import org.ginsim.core.graph.regulatorygraph.RegulatoryGraph;
import org.ginsim.core.service.GSServiceManager;
import org.ginsim.service.export.image.ImageExportService;
import org.json.JSONObject;

import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;

/**
 * Export the documentation of a model into an interactive web page.
 */
public class JSONDocumentationWriter extends AbstractTask {

	private final RegulatoryGraph graph;
    private final String export_name;
	
	public JSONDocumentationWriter(RegulatoryGraph graph, String export_name) {
		this.graph = graph;
        if (export_name.endsWith(".html")) {
            this.export_name = export_name.substring(0, export_name.length()-5);
        } else {
            this.export_name = export_name;
        }
	}
	

	/**
	 * Export a model as documentation data (SVG+JSON).
	 * 
	 * @throws IOException
	 */
	private void writeJSON(String filename) throws IOException {

		Writer f = new FileWriter(filename);
		
		f.write("model = ");
		Annotator< NodeInfo> annotator = this.graph.getAnnotator();
		JSONObject json = annotator.writeAnnotationsInJSON();
		f.write(json.toString());
        f.write("\n");
		f.close();
	}

    private void inline(XMLWriter writer, String filename) throws IOException {
        InputStream stream = IOUtils.getStreamForPath(getClass().getPackage(), filename);
        StringBuffer sb = IOUtils.readFromResource(stream);
        writer.addContent("");
        writer.write(sb.toString());
    }

    private void writeHTMLContainer(String filename) throws IOException {
        XMLWriter writer = new XMLWriter(filename+".html");

        writer.openTag("html");
        writer.openTag("head");

        writer.openTag("style", new String[] {"media","screen", "type","text/css"});
        inline(writer, "style.css");
        writer.closeTag();

        writer.addTag("script", new String[] {"type", "text/javascript", "src", "http://code.jquery.com/jquery-1.11.0.min.js"}, "");
        writer.openTag("script", new String[]{"type", "text/javascript"});
        inline(writer, "GINsimDocumentation.js");
        writer.closeTag();
        writer.addTag("script", new String[]{"type", "text/javascript", "src", filename + ".js"}, "");

        writer.closeTag(); // head
         
        writer.openTag("body");

        writer.openTag("header");
        writer.addAttr("class", "banner");
        writer.addTagWithContent("h1", "Interactive documentation test");

        writer.openTag("nav");
        writer.openTag("a", new String[]{"href", "#graph", "onClick", "showGraph(); return false;"});
        writer.addTagWithContent("span", "Graph");
        writer.closeTag();

        writer.openTag("a", new String[] {"href", "#table", "onClick", "showTable(); return false;"});
        writer.addTagWithContent("span", "Table");
        writer.closeTag();
        writer.closeTag();  // nav
        writer.closeTag();  // header


        writer.openTag("div", new String[] {"id", "graphView"});
        writer.openTag("div", new String[] {"id", "infodiv"});
        writer.addContent("Loading...");
        writer.closeTag();

        writer.addTag("embed", new String[]{"id", "container", "type", "image/svg+xml", "src", filename + ".svg"});
        writer.addTag("div", new String[]{"id", "clearer"});
        writer.closeTag();  // main div

        writer.addTag("div", new String[]{"id", "tableView"});

        writer.openTag("div", new String[] {"id", "footer"});
        writer.addContent("Generated by ");
        writer.addTag("a", new String[] {"href", "http://www.ginsim.org"}, "GINsim");
        writer.closeTag();

        writer.close();
    }


    @Override
    public Object performTask() {
        try {
            ImageExportService service = GSServiceManager.getService(ImageExportService.class);
            service.exportSVG(graph, null, null, export_name+".svg");
            writeJSON(export_name + ".js");
            writeHTMLContainer(export_name);
        } catch (Exception e) {
            LogManager.error(e);
        }
        return null;
    }
}
