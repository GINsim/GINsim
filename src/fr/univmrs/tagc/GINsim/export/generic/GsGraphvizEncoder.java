package fr.univmrs.tagc.GINsim.export.generic;

import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Iterator;

import fr.univmrs.tagc.GINsim.data.GsDirectedEdge;
import fr.univmrs.tagc.GINsim.global.GsEnv;
import fr.univmrs.tagc.GINsim.graph.GsGraph;
import fr.univmrs.tagc.common.GsException;

/**
 * Encode a graph to graphviz format.
 * It is based on org.jgraph.util.JGraphGraphvizEncoder
 * but isn't jgraph specific and writes the result to a File instead of putting it in a String.
 * (basically no original code remains..)
 */
public class GsGraphvizEncoder {

	/**
	 * @param graph
	 * @param selectedOnly
	 * @param fileName
	 */
	public static void encode(GsGraph graph, boolean selectedOnly, String fileName) {
		DateFormat dateformat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);
		String date = dateformat.format(new Date());
		try {
	        FileWriter out = new FileWriter(fileName);
	
	        out.write("/* Graphviz file generated by " +
	    			"GINsim - " + date + " */" +
	    			"\n\ndigraph G {");
	        Iterator it;
	        
			// Create external keys for nodes
	        if (selectedOnly) {
	        	it = graph.getGraphManager().getSelectedVertexIterator();
	        } else {
	        	it = graph.getGraphManager().getVertexIterator();
	        }

            // Process Nodes
	        while (it.hasNext()) {
	        	Object vertex = it.next();
	        	if (vertex instanceof Dotify) {
	        		out.write(((Dotify) vertex).toDot());
	        	} else {
		        	out.write("\n\t"+vertex+" [label=\"" + vertex + "\", shape=\"box\"];");
	        	}

	        }

	        // Process Edges
	        if (selectedOnly) {
	        	it = graph.getGraphManager().getFullySelectedEdgeIterator();
	        } else {
	        	it = graph.getGraphManager().getEdgeIterator();
	        }
	        while (it.hasNext()) {
	        	Object edge = it.next();
	        	Object from = null;
	        	Object to = null;
	        	if (edge instanceof GsDirectedEdge) {
        			from = ((GsDirectedEdge)edge).getSource();
                	to = ((GsDirectedEdge)edge).getTarget();	        			
	        		if (from instanceof Dotify) {
	                    out.write("\n\t"+((Dotify) from).toDot(to));
	        		} else {
	                    out.write("\n\t" + from + " -> " + to + ";");
	        		}
	        	}
	        }
	
			// Close main tags
			out.write("\n}");
			out.close();
		} catch (IOException e) {
			GsEnv.error(new GsException(GsException.GRAVITY_ERROR, e.getLocalizedMessage()), null);
		}
	}
}
