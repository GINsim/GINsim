package fr.univmrs.tagc.GINsim.export.generic;

import java.io.FileWriter;
import java.io.IOException;
import java.util.Hashtable;
import java.util.Iterator;

import org.ginsim.graph.Graph;

import fr.univmrs.tagc.GINsim.data.GsDirectedEdge;
import fr.univmrs.tagc.GINsim.global.GsEnv;
import fr.univmrs.tagc.GINsim.graph.GsGraph;
import fr.univmrs.tagc.common.GsException;

/**
 * Encode a graph to biolayout format.
 */
public class GsBioLayoutEncoder {
	static transient Hashtable hash;

	/**
	 * @param graph
	 * @param selectedOnly
	 * @param fileName
	 */
	public static void encode( Graph graph, boolean selectedOnly, String fileName) {
		hash = new Hashtable();
		try {
	        FileWriter out = new FileWriter(fileName);
	
	        // out.write("// Biolayout file generated by GINsim - " + 
	        // DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(new Date()) +"\n");
	        Iterator it;
	        
	        // Process Edges
	        if (selectedOnly) {
	        	it = graph.getGraphManager().getFullySelectedEdgeIterator();
	        } else {
	        	it = graph.getEdges().iterator();
	        }
	        while (it.hasNext()) {
	        	Object edge = it.next();
	        	Object from = null;
	        	Object to = null;
	        	if (edge instanceof GsDirectedEdge) {
	        		from = ((GsDirectedEdge)edge).getSource();
	        		to = ((GsDirectedEdge)edge).getTarget();
		        	out.write(from + "\t" + to + "\n");
	        	}
	        }
	
			// Close main tags
			out.close();
		} catch (IOException e) {
			GsEnv.error(new GsException(GsException.GRAVITY_ERROR, e.getLocalizedMessage()), null);
		}
	}
}
