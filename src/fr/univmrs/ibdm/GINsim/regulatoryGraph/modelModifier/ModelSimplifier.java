package fr.univmrs.ibdm.GINsim.regulatoryGraph.modelModifier;

import java.text.DateFormat;
import java.util.*;
import java.util.Map.Entry;

import fr.univmrs.ibdm.GINsim.annotation.Annotation;
import fr.univmrs.ibdm.GINsim.data.GsDirectedEdge;
import fr.univmrs.ibdm.GINsim.global.GsException;
import fr.univmrs.ibdm.GINsim.graph.GsEdgeAttributesReader;
import fr.univmrs.ibdm.GINsim.graph.GsGraphManager;
import fr.univmrs.ibdm.GINsim.graph.GsVertexAttributesReader;
import fr.univmrs.ibdm.GINsim.regulatoryGraph.GsRegulatoryGraph;
import fr.univmrs.ibdm.GINsim.regulatoryGraph.GsRegulatoryMultiEdge;
import fr.univmrs.ibdm.GINsim.regulatoryGraph.GsRegulatoryVertex;
import fr.univmrs.ibdm.GINsim.regulatoryGraph.OmddNode;

/**
 * Build a simplified model, based on a complete one, by removing some nodes.
 * 
 * The first step is to build new MDD for the targets of the removed nodes.
 * If this succeeded (no circuit was removed...), a new regulatory graph is created
 * and all non-removed nodes are copied into it, as well as all remaining interactions.
 * Then the logical parameters of the unaffected nodes are restored.
 * For the affected nodes, some work is required, using the newly built MDD for their logical function:
 * <ul>
 *   <li>new edges are added if needed (coming from the regulators of their deleted regulators)</li> 
 *   <li>new logical parameters are extracted from the MDD</li>
 * </ul>
 */
public class ModelSimplifier extends Thread implements Runnable {

	GsGraphManager manager;
	ModelSimplifierConfigDialog dialog;
	int[] t_remove = null;

	GsRegulatoryGraph graph;
	Vector oldNodeOrder;
	GsRegulatoryGraph simplifiedGraph;
	Map m_modified = new HashMap();
	Map m_edges = new HashMap();
	Map copyMap = new HashMap();
	Map m_removed;

	
	public ModelSimplifier(GsRegulatoryGraph graph, ModelSimplifierConfig config, ModelSimplifierConfigDialog dialog) {
		this.graph = graph;
		this.oldNodeOrder = graph.getNodeOrder();
		this.dialog = dialog;
		this.m_removed = new HashMap(config.m_removed);
		manager = graph.getGraphManager();
		start();
	}

	public void run() {
		Iterator it;
		try {
			// first do the "real" simplification work
			Map m_affected = new HashMap();
			String s_comment = "";
			it = m_removed.entrySet().iterator();
			TargetEdgesIterator it_targets = new TargetEdgesIterator(m_removed);
			while (it.hasNext()) {
				Entry entry = (Entry)it.next();
				List targets = new ArrayList();
				GsRegulatoryVertex vertex = (GsRegulatoryVertex)entry.getKey();
				OmddNode deleted = (OmddNode)m_affected.get(vertex);
				if (deleted == null) {
					deleted = vertex.getTreeParameters(graph);
				}
				int pos = graph.getNodeOrder().indexOf(vertex);
				s_comment += ", "+vertex.getId();
				
				// mark all its targets as affected
				it_targets.setOutgoingList(manager.getOutgoingEdges(vertex));
				while (it_targets.hasNext()) {
					GsRegulatoryVertex target = (GsRegulatoryVertex)it_targets.next();
					targets.add(target);
					OmddNode targetNode = (OmddNode)m_affected.get(target);
					if (targetNode == null) {
						targetNode = target.getTreeParameters(graph);
					}
					m_affected.put(target, remove(targetNode, deleted, pos).reduce());
				}
				entry.setValue(new ArrayList(targets));
			}
			
			// create the new regulatory graph
			simplifiedGraph = new GsRegulatoryGraph();
			Annotation note = simplifiedGraph.getAnnotation();
			note.copyFrom(graph.getAnnotation());
			if (s_comment.length() > 2) {
				note.setComment("Model Generated by GINsim on "+
						DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG).format(new Date()) +
						", by removing the following nodes: "+s_comment.substring(2)+
						"\n\n"+note.getComment());
			}
			
			GsGraphManager simplifiedManager = simplifiedGraph.getGraphManager();
			Vector simplified_nodeOrder = simplifiedGraph.getNodeOrder();
			
			// Create all the nodes of the new model
			GsVertexAttributesReader vreader = manager.getVertexAttributesReader();
			GsVertexAttributesReader simplified_vreader = simplifiedManager.getVertexAttributesReader();
			it = graph.getNodeOrder().iterator();
			while (it.hasNext()) {
				GsRegulatoryVertex vertex = (GsRegulatoryVertex)it.next();
				if (!m_removed.containsKey(vertex)) {
					GsRegulatoryVertex clone = (GsRegulatoryVertex)vertex.clone();
					simplifiedManager.addVertex(clone);
					vreader.setVertex(vertex);
					simplified_vreader.setVertex(clone);
					simplified_vreader.copyFrom(vreader);
					copyMap.put(vertex, clone);
					simplified_nodeOrder.add(clone);
				}
			}
			
			// copy all unaffected edges
			GsEdgeAttributesReader ereader = manager.getEdgeAttributesReader();
			GsEdgeAttributesReader simplified_ereader = simplifiedManager.getEdgeAttributesReader();
			it = manager.getEdgeIterator();
			while (it.hasNext()) {
				GsRegulatoryMultiEdge me = (GsRegulatoryMultiEdge)((GsDirectedEdge)it.next()).getUserObject();
				GsRegulatoryVertex src = (GsRegulatoryVertex)copyMap.get(me.getSource());
				GsRegulatoryVertex target = (GsRegulatoryVertex)copyMap.get(me.getTarget());
				if (src != null && target != null) {
					GsRegulatoryMultiEdge me_clone = new GsRegulatoryMultiEdge(src, target);
					me_clone.copyFrom(me);
					simplifiedManager.addEdge(src, target, me_clone);
					copyMap.put(me, me_clone);
					ereader.setEdge(me);
					simplified_ereader.setEdge(me_clone);
					simplified_ereader.copyFrom(ereader);
				}
			}
	
			// copy parameters/logical functions on the unaffected nodes
			it = oldNodeOrder.iterator();
			while (it.hasNext()) {
				GsRegulatoryVertex vertex = (GsRegulatoryVertex)it.next();
				GsRegulatoryVertex clone = (GsRegulatoryVertex)copyMap.get(vertex);
				if (m_removed.containsKey(vertex)) {
					continue;
				}
				if (!m_affected.containsKey(vertex)) {
					vertex.cleanupInteractionForNewGraph(copyMap);
					continue;
				}
				
				// this node needs new parameters
				OmddNode newNode = (OmddNode)m_affected.get(vertex);
	
				// make sure that the needed edges target the affected node
				m_edges.clear(); 
				extractEdgesFromNode(newNode);
				GsRegulatoryVertex target = (GsRegulatoryVertex)copyMap.get(vertex);
				Iterator it_newEdges = m_edges.entrySet().iterator();
				while (it_newEdges.hasNext()) {
					Entry e = (Entry)it_newEdges.next();
					GsRegulatoryVertex src = (GsRegulatoryVertex)copyMap.get(e.getKey());
					GsDirectedEdge de = (GsDirectedEdge)simplifiedManager.getEdge(src, target);
					GsRegulatoryMultiEdge new_me;
					if (de == null) {
						new_me = new GsRegulatoryMultiEdge(src, target);
						simplifiedManager.addEdge(src, target, new_me);
					} else {
						new_me = (GsRegulatoryMultiEdge)de.getUserObject();
					}
					boolean[] t_required = (boolean[])e.getValue();
					new_me.copyFrom(t_required);
				}
				
				// rebuild the parameters
				m_edges.clear();
				List edges = simplifiedManager.getIncomingEdges(clone);
				Iterator it2 = edges.iterator();
				while (it2.hasNext()) {
					GsDirectedEdge e = (GsDirectedEdge)it2.next();
					GsRegulatoryVertex src = (GsRegulatoryVertex)e.getSourceVertex();
					int[] t_val = {0, src.getMaxValue()};
					m_edges.put(src, t_val);
				}
				buildParametersFromNode(edges, clone, newNode);
			}
			if (dialog != null) {
				dialog.endSimu(simplifiedGraph, null);
			}
		} catch (Exception e) {
			e.printStackTrace();
			if (dialog != null) {
				dialog.endSimu(null, e);
			}
		}
	}
	
	/**
	 * extract the list of required edges for a given logical function.
	 * @param node
	 */
	private void extractEdgesFromNode(OmddNode node) {
		if (node.next == null) {
			return;
		}
		GsRegulatoryVertex vertex = (GsRegulatoryVertex)oldNodeOrder.get(node.level);
		boolean[] t_threshold = (boolean[])m_edges.get(vertex);
		if (t_threshold == null) {
			t_threshold = new boolean[vertex.getMaxValue()+1];
			for (int i=0 ; i<t_threshold.length ; i++) {
				t_threshold[i] = false;
			}
			m_edges.put(vertex, t_threshold);
		}

		OmddNode child = null;
		for (int i=0 ; i<node.next.length ; i++) {
			if (child != node.next[i]) {
				if (child != null) {
					t_threshold[i] = true;
				}
				child = node.next[i];
				extractEdgesFromNode(node.next[i]);
			}
		}
	}

	/**
	 * build the logical parameters corresponding to a given logical function.
	 * @param node
	 */
	private void buildParametersFromNode(List edges, GsRegulatoryVertex targetVertex, OmddNode node) {
		if (node.next == null) {
			// this is a leaf: build the parameters if needed
			if (node.value != 0) {
				targetVertex.addParametersForMDDLeaf(node.value, edges, m_edges);
			}
			return;
		}
		// continue but remember the selected value for this node
		GsRegulatoryVertex vertex = (GsRegulatoryVertex)copyMap.get(oldNodeOrder.get(node.level));
		int[] t_val = (int[])m_edges.get(vertex);
		int start = 0;
		for (int i=1 ; i<node.next.length ; i++) {
			if (node.next[start] != node.next[i]) {
				t_val[0] = start;
				t_val[1] = i-1;
				buildParametersFromNode(edges, targetVertex, node.next[start]);
				start = i;
			}
		}
		t_val[0] = start;
		t_val[1] = vertex.getMaxValue();
		buildParametersFromNode(edges, targetVertex, node.next[start]);
		t_val[0] = 0;
		t_val[1] = vertex.getMaxValue();
	}


	/* *************************************************************
	 *  
	 *  The real algo is here
	 *  
	 *  Deleting a node means removing it (by taking into account its logical
	 *  function) from all of its targets
	 *  
	 ***************************************************************/
	
	/**
	 * Remove <code>regulator</code> from its target <code>node</code>.
	 * This is the first part of the algo: we have not yet found the 
	 * regulator in the logical function.
	 * It will be called recursively until we find it (or go too far)
	 * 
	 * @param node
	 * @param regulator
	 * @param level
	 * @return
	 */
	public OmddNode remove(OmddNode node, OmddNode regulator, int level) throws GsException {
		
		if (node.next == null || node.level > level) {
			return node;
		}
		if (node.level == level) {
			if (regulator.next == null) {
				return node.next[regulator.value];
			}
			if (regulator.level == level) {
				throw new GsException(GsException.GRAVITY_ERROR, "Can not continue the simplification: a circuit would get lost");
			}
			return remove(node.next, regulator);
		}
		
		OmddNode ret = new OmddNode();
		if (regulator.next == null || regulator.level > node.level) {
			ret.level = node.level;
			ret.next = new OmddNode[node.next.length];
			for (int i=0 ; i<ret.next.length ; i++) {
				ret.next[i] = remove(node.next[i], regulator, level);
			}
		} else if (node.level > regulator.level) {
			ret.level = regulator.level;
			ret.next = new OmddNode[regulator.next.length];
			for (int i=0 ; i<ret.next.length ; i++) {
				ret.next[i] = remove(node, regulator.next[i], level);
			}
		} else {
			ret.level = node.level;
			ret.next = new OmddNode[node.next.length];
			for (int i=0 ; i<ret.next.length ; i++) {
				ret.next[i] = remove(node.next[i], regulator.next[i], level);
			}
		}
		return ret;
	}

	/**
	 * Remove <code>regulator</code> from its target <code>node</code>.
	 * This is the second part of the algo: we have found the regulator 
	 * in the logical function.
	 * We must thus follow all branches corresponding to its possible values,
	 * until we can take the final decision.
	 * 
	 * @param t_ori
	 * @param regulator
	 * @return
	 */
	public OmddNode remove(OmddNode[] t_ori, OmddNode regulator) {
		if (regulator.next == null) {
			return t_ori[regulator.value];
		}
		// first, lookup for the best next step
		int best = regulator.level;
		int index = -1;
		for (int i=0 ; i<t_ori.length ; i++) {
			OmddNode node = t_ori[i];
			if (node.next != null && node.level <= best) { 
				// also update when equal to avoid stupid optimisations...
				best = node.level;
				index = i;
			}
		}
		
		OmddNode ret = new OmddNode();
		ret.level = best;
		if (index == -1) {
			ret.next = new OmddNode[regulator.next.length];
			for (int i=0 ; i<ret.next.length ; i++) {
				ret.next[i] = remove(t_ori, regulator.next[i]);
			}
		} else {
			ret.next = new OmddNode[t_ori[index].next.length];
			for (int i=0 ; i<ret.next.length ; i++) {
				OmddNode[] t_recur = new OmddNode[t_ori.length];
				for (int j=0 ; j<t_recur.length ; j++) {
					OmddNode node = t_ori[j];
					if (node.next == null || node.level > best) {
						t_recur[j] = node;
					} else {
						t_recur[j] = node.next[i];
					}
				}
				if (regulator.level == best) {
					ret.next[i] = remove(t_recur, regulator.next[i]);
				} else {
					ret.next[i] = remove(t_recur, regulator);
				}
			}
		}
		return ret;
	}
}


class TargetEdgesIterator implements Iterator {

	LinkedList queue = new LinkedList();
	Map m_visited = new HashMap();
	Map m_removed;
	
	Object next;
	
	public TargetEdgesIterator(Map m_removed) {
		this.m_removed = m_removed;
	}
	
	public boolean hasNext() {
		return next != null;
	}

	public Object next() {
		Object ret = next;
		
		// find the next.
		// it can be a "normal next target" if it was not removed
		// if it was removed, it may be one of the targets of the removed node
		next = null;
		while (queue.size() > 0) {
			Object vertex = queue.removeFirst();
			if (m_visited.containsKey(vertex)) {
				// this node was checked already, skip it
				continue;
			}
			m_visited.put(vertex, null);
			Object targets = m_removed.get(vertex);
			if (targets == null) {
				// "clean" node: go for it!
				next = vertex;
				break;
			}
			
			// "dirty" node: enqueue its targets
			Iterator it = ((List)targets).iterator();
			while (it.hasNext()) {
				queue.addLast(it.next());
			}
		}
		return ret;
	}

	public void remove() {
		throw new UnsupportedOperationException();
	}
	
	public void setOutgoingList(List outgoing) {
		Iterator outgoingIterator = outgoing.iterator();
		m_visited.clear();
		queue.clear();
		while (outgoingIterator.hasNext()) {
			queue.addLast(((GsDirectedEdge)outgoingIterator.next()).getTargetVertex());
		}
		next();
	}
}