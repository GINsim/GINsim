package fr.univmrs.ibdm.GINsim.export.generic;

import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.Iterator;

import fr.univmrs.ibdm.GINsim.data.GsDirectedEdge;
import fr.univmrs.ibdm.GINsim.global.GsEnv;
import fr.univmrs.ibdm.GINsim.global.GsException;
import fr.univmrs.ibdm.GINsim.graph.GsGraph;

/**
 * Encode a graph to biolayout format.
 */
public class GsBioLayoutEncoder {
	static transient Hashtable hash;

	/**
	 * @param graph
	 * @param selectedOnly
	 * @param fileName
	 */
	public static void encode(GsGraph graph, boolean selectedOnly, String fileName) {
		hash = new Hashtable();
		DateFormat dateformat = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG);
		String date = dateformat.format(new Date());
		try {
	        FileWriter out = new FileWriter(fileName);
	
	        out.write("// Biolayout file generated by " +
	    			"GINsim - " + date+"\n");
	        Iterator it;
	        
	        // Process Edges
	        if (selectedOnly) {
	        	it = graph.getGraphManager().getSelectedEdgeIterator();
	        } else {
	        	it = graph.getGraphManager().getEdgeIterator();
	        }
	        while (it.hasNext()) {
	        	Object edge = it.next();
	        	Object from = null;
	        	Object to = null;
	        	if (edge instanceof GsDirectedEdge) {
	        		from = ((GsDirectedEdge)edge).getSourceVertex();
	        		to = ((GsDirectedEdge)edge).getTargetVertex();
		        	out.write(from + "\t" + to + "\n");
	        	}
	        }
	
			// Close main tags
			out.close();
		} catch (IOException e) {
			GsEnv.error(new GsException(GsException.GRAVITY_ERROR, e.getLocalizedMessage()), null);
		}
	}
}
