<?xml version="1.0" encoding="iso-8859-1"?>
<project name="GINsim" default="help" basedir=".">
	<!-- version info & compilation date -->
	<tstamp>
		<format property="CURDATE" pattern="yyyy-MM-dd"/>
	</tstamp>
	<property name="baseversion" value="2.9"/>
	<property name="version" value="${baseversion}_${CURDATE}" />

	<!-- Compilation options -->
	<property name="compile.jversion" value="1.6"/>
	<property name="compile.optimize" value="on"/>
	<property name="compile.debug" value="off"/>
	
	<!-- set global properties for this build -->
	<property name="src" location="./src"/>
	<property name="build" location="./build"/>
	<property name="dist" location="./dist"/>
	<property name="lib.dir" value="../lib"/>
	<property name="src.resources.ginsim" location="${src}/org/ginsim/gui/resource"/>
<<<<<<< HEAD
	<property name="src.resources.jython" location="${src}/org/ginsim/gui/service/tool/jython/console"/>
	<property name="src.resources.common" location="${src}/fr/univmrs/tagc/common/resources"/>
	<property name="build.resources.ginsim" location="${build}/org/ginsim/gui/resource"/>
	<property name="build.resources.jython" location="${build}/org/ginsim/gui/service/tool/jython/console"/>
	<property name="build.resources.common" location="${build}/fr/univmrs/tagc/common/resources"/>
=======
	<property name="src.resources.jython" location="${src}/org/ginsim/servicegui/tool/jython/console"/>
	<property name="build.resources.ginsim" location="${build}/org/ginsim/gui/resource"/>
	<property name="build.resources.jython" location="${build}/org/ginsim/servicegui/tool/jython/console"/>
>>>>>>> branch 'dev-refactor' of gitosis@192.168.52.30:ginsim-dev.git

	<property name="jar.name" value="${ant.project.name}-${version}.jar"/>
	<property name="jar.file" value="${lib.dir}/../${jar.name}"/>

	<!-- set documentation properties -->
	<property name="doc.src" location="Documentation"/>
	<property name="doc.dist" location="${dist}/Documentation"/>
	<property name="doc.dist.javadoc" location="${doc.dist}/javadoc"/>
	<property name="doc.dist.pdf" location="${doc.dist}/pdf"/>
	<property name="doc.dist.docbook" location="${doc.dist}/docbook"/>
	<property name="docbook.htmlstyle" location="${doc.dist.docbook}/ginsimdoc.xsl"/>

	<!-- Setting the classpath with the necessary libraries -->
	<available file="${GSLib}" type="dir" property="lib.dir" value="${GSLib}"/>
	<path id="lib.classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
	</path>
	
	<!-- Setting the JarBundler file location -->
	<property name="jarbundle.file" value="/usr/share/ant/lib/jarbundler-2.2.0.jar"/>
	<available file="${BUNDLER}" type="file" property="jarbundle.file" value="${BUNDLER}"/>

	<!-- ************************************************** -->
	<!-- Display the list of all available targets          -->
	<!-- ************************************************** -->
	<target name="help">
		<echo>The following ant targets are available for this file:
  help        - Displays this help message
  clean       - Cleans all non-source files
  init        - Prepares directories for compilation
  compile     - Compiles all the src/ files considering the GSLib libraries
  jar         - Builds a stripped jar file for GINsim (looks for a lib/ directory)
  jar.dist    - Builds an independent jar file for GINsim (containing the necessary libraries)
  doc.all     - Builds all documentation (javadoc and docbook)
  doc.javadoc - Generates the Javadoc for all the src/ files
  doc.docbook	- Builds the user documentation (tutorial and manual)
  .tocontinue. - ...</echo>
	</target>
	
	<!-- ************************************************** -->
	<!-- Creates ${build} and ${dist} directories           -->
	<!-- ************************************************** -->
	<target name="init" description="Prepares directories for build">
		<echo message="--> Preparing directories for build ..." />
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create build and dist directory -->
		<mkdir dir="${build}"/>
		<mkdir dir="${build.resources.ginsim}"/>
		<mkdir dir="${build.resources.jython}"/>
		<mkdir dir="${dist}"/>
	</target>

	<!-- ************************************************** -->
	<!-- Cleans ${build} and ${dist} directories            -->
	<!-- ************************************************** -->
	<target name="clean" description="Cleans all non-source files" >
		<echo message="--> Cleaning ${ant.project.name} project ..." />
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
	</target>

	<!-- ************************************************** -->
	<!-- Compiles ${src} classes                            -->
	<!-- ************************************************** -->
	<target name="compile" depends="init" description="Compiles the src files">
		<echo message="--> Compiling ${ant.project.name} project ..."/>
		<!-- Compile the java code from ${src} into ${build} -->
		<javac source="${compile.jversion}" target="${compile.jversion}" includeantruntime="false"
			srcdir="${src}" destdir="${build}">
			<classpath location="${build}">
				<path refid="lib.classpath"/>
			</classpath>
		</javac>

		<echo message="--> Copying resources ..."/>
		<!-- copy resources files -->
		<copy todir="${build.resources.ginsim}">
			<fileset dir="${src.resources.ginsim}"/>
		</copy>
		<copy todir="${build.resources.jython}">
			<fileset dir="${src.resources.jython}"/>
		</copy>

		<!-- build the doap file -->
		<property name="doapfile" value="${ant.project.name}-about.rdf"/>
		<exec dir="${build.resources.ginsim}" executable="xsltproc">
			<arg line="-o ${doapfile} --stringparam ${ant.project.name}.version ${version}  doapversionchange.xsl ${doapfile}"/>
		</exec>
	</target>

	<!-- ************************************************** -->
	<!-- Generates GINsim jar file without libs  -->
	<!-- ************************************************** -->
	<target name="jar" depends="compile"
		description="Generates GINsim jar file in ${dist} witout ${lib.dir}">
		<manifestclasspath maxparentlevels="0" jarfile="${jar.file}" property="manifest.class.path">
			<classpath refid="lib.classpath"/>
		</manifestclasspath>
		<jar destfile="${jar.file}"
			basedir="${build}"
			includes="**/*">
			<manifest>
				<attribute name="Main-Class" value="org.ginsim.TestRefactor"/>
				<attribute name="Class-Path" value="${manifest.class.path}"/>
				<attribute name="${ant.project.name}-version" value="${baseversion}"/>
				<attribute name="Compilation-Date" value="${CURDATE}"/>
			</manifest>
		</jar>
	</target>
	
	<!-- ************************************************** -->
	<!-- Generates GINsim jar file in ${dist} with libs     -->
	<!-- ************************************************** -->
	<target name="jar.dist" depends="compile"
		description="Generates GINsim jar file in ${dist} with ${lib.dir}" >
		<delete dir="${dist}"/>
		<mkdir dir="${dist}"/>
		<jar destfile="${dist}/${jar.name}"
			basedir="${build}"
			includes="**/*">
			<zipgroupfileset dir="${lib.dir}" includes="*.jar">
				<!-- avoiding signed tbrowser.jar to ruin everything -->
				<exclude name="tbrowser.jar"/>
			</zipgroupfileset>
			<manifest>
				<attribute name="Main-Class" value="fr.univmrs.tagc.GINsim.global.GsMain"/>
				<attribute name="${ant.project.name}-version" value="${baseversion}"/>
				<attribute name="Compilation-Date" value="${CURDATE}"/>
			</manifest>
		</jar>
	</target>
	
	<!-- ************************************************** -->
	<!-- ********** Starting Documentation targets ******** -->
	<!-- ************************************************** -->
	<target name="doc.all" depends="doc.docbook,doc.javadoc" description="generate all doc"/>
	<target name="doc.docbook" depends="doc.docbook.single, doc.docbook.chunked" description="Documentation: all docbook versions (chunked, single)"/>

	<!-- ************************************************** -->
	<!-- Creates the doc directory structure                -->
	<!-- ************************************************** -->
	<target name="doc.init" depends="init" description="Creates the doc directory structure">
		<echo message="--> Creating the doc directory structure ..." />
		<mkdir dir="${doc.dist}"/>
		<copy todir="${doc.dist}/"><fileset dir="${doc.src}"/></copy>
		<mkdir dir="${doc.dist.javadoc}"/>
		<mkdir dir="${doc.dist.pdf}"/>
	</target>

	<!-- ************************************************** -->
	<!-- Generates the Javadoc files from ${src}            -->
	<!-- ************************************************** -->
	<target name="doc.javadoc" depends="doc.init" description="Generates the javadoc">
		<echo message="--> Generating the Javadoc files ..." />
		<javadoc destdir="${doc.dist.javadoc}"
			classpath="${classpath}"
			author="true"
			version="true"
			use="true"
			access="private"
			windowtitle="API documentation for GINsim (Gene Interaction Network simulator)">

			<packageset dir="${src}" defaultexcludes="yes">
				<include name="fr/univmrs/tagc/**" />
			</packageset>

			<doctitle><![CDATA[<h1>API documentation for GINsim</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2011 IBDML. All Rights Granted.</i>]]></bottom>
		</javadoc>
	</target>

	<!-- ************************************************** -->
	<!-- Docbook Documentation targets                      -->
	<!-- ************************************************** -->

	<!-- generate chunked version of the doc: .db files then real export -->
	<target name="doc.docbook.chunked" depends="doc.init" description="Documentation: html chunked pages">
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="--stringparam  targets.filename tutorial.db --stringparam collect.xref.targets only ginsimdoc.xsl tutorial.xml"/>
	 	</exec>
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="--xinclude --stringparam  targets.filename userManual.db --stringparam collect.xref.targets only ginsimdoc.xsl userManual.xml"/>
	 	</exec>

	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="-o ../html/ --stringparam  current.docid tutorial ginsimdoc.xsl tutorial.xml"/>
	 	</exec>
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="-o ../html/ --xinclude --stringparam  current.docid userManual ginsimdoc.xsl userManual.xml"/>
	 	</exec>
	</target>

	<!-- and single-page version  -->
	<target name="doc.docbook.single" depends="doc.init" description="Documentation: html single pages">
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="--stringparam  targets.filename tutorial.db --stringparam collect.xref.targets only ginsimdoc-single.xsl tutorial.xml"/>
	 	</exec>
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="--xinclude --stringparam  targets.filename userManual.db --stringparam collect.xref.targets only ginsimdoc-single.xsl userManual.xml"/>
	 	</exec>
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="-o ../html/tutorial.html --stringparam  current.docid tutorial ginsimdoc-single.xsl tutorial.xml"/>
	 	</exec>
	 	<exec dir="${doc.dist.docbook}" executable="xsltproc">
	 		<arg line="-o ../html/userManual.html --xinclude --stringparam  current.docid userManual ginsimdoc-single.xsl userManual.xml"/>
	 	</exec>
	</target>

	<!-- TODO finally a pdf version, using dblatex  -->
	<target name="doc.docbook.pdf" depends="doc.init" description="Documentation: pdf version">
	 	<exec dir="${doc.dist.docbook}" executable="dblatex">
	 		<arg line="-T simple tutorial.xml"/>
	 	</exec>
	 	<exec dir="${doc.dist.docbook}" executable="dblatex">
	 		<arg line="-T simple userManual.xml"/>
	 	</exec>
		<move todir="${doc.dist.pdf}" file="${doc.dist.docbook}/tutorial.pdf"/>
		<move todir="${doc.dist.pdf}" file="${doc.dist.docbook}/userManual.pdf"/>
	 </target>
	
	<!-- ************************************************** -->
	<!-- Build an application bundle for Mac OS X           -->
	<!-- ************************************************** -->
	<target name="macbundle.check" description="Build an application for mac">
		<!--Fetch jarbundler at http://informagen.com/JarBundler/ and install it in /usr/share/ant/lib/ (default)  -->
		<condition property="macbundle.cond">
			<resourceexists><file file="${jarbundle.file}"/></resourceexists>
		</condition>
	</target>
	<target name="macbundle.then" depends="macbundle.check,jar" if="macbundle.cond">
		<taskdef name="jarbundler" classpath="${jarbundle.file}"
			classname="net.sourceforge.jarbundler.JarBundler"/>

		<jarbundler dir="${dist}"
			name="${ant.project.name}"
			mainclass="fr.univmrs.tagc.GINsim.global.GsMain"
			jar="${dist}/${jar.name}"
			jvmversion="${compile.jversion}"
			version="${baseversion}"
			build="${CURDATE}"
			infostring="GINsim (Gene Interaction Network simulation) is a computer tool for the modeling and simulation of genetic regulatory networks. See http://gin.univ-mrs.fr/" 
			icon="${src.resources.ginsim}/icon/GINsim.icns"
			>
<!--
			bundleid="fr.univmrs.tagc.GINsim"
			stubfile="${ant.project.name}"
			showPlist="false"
			shortname="${ant.project.name}"
			verbose="true"
			signature="giml"
			
-->
			<!-- Adjust the look, feel and behavior -->
			<javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
			<javaproperty name="apple.awt.brushMetal" value="false"/>
			<javaproperty name="apple.awt.showGrowBox" value="false"/>

			<!-- Associate document types with this application -->
			<!-- FIXME: add iconFile="${icons}/ginml.icns" -->
			<documenttype name="GINML document" extensions="ginml" role="Editor"
				iconFile="${src.resources.ginsim}/icon/GINsim.icns"/>
			<documenttype name="zGINML document" extensions="zginml" role="Editor"
				iconFile="${src.resources.ginsim}/icon/GINsim.icns"/>
		</jarbundler>
		<copy todir="${dist}/${ant.project.name}.app/Contents/Resources/Java/lib">
			<fileset dir="${lib.dir}" includes="**/*.jar" />
		</copy>
	</target>
	<target name="macbundle.else" depends="macbundle.check" unless="macbundle.cond">
		<echo>JarBundler not found at ${jarbundle.file}
Please install it or pass its location to ant using the BUNDLER parameter:
  ant -DBUNDLER=/path/to/bundler.jar macbundle</echo>
	</target>
	<target name="macbundle" depends="macbundle.then, macbundle.else"/>
	
</project>
